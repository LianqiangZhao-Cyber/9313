["Brisbane", "1998"]	["monthly", 24.638888888888886]
["Melbourne", "1999"]	["monthly", 25.962962962962962]
["Melbourne", "1998"]	["monthly", 22.875]
["Brisbane", "1999"]	["monthly", 24.759259259259256]
["Brisbane", "2000"]	["monthly", 22.694444444444443]
["Melbourne", "1997"]	["monthly", 18.916666666666664]
["Brisbane", "1995"]	["monthly", 24.958333333333332]
["Brisbane", "1997"]	["monthly", 23.0]
["Melbourne", "1995"]	["monthly", 21.069444444444446]
["Brisbane", "1996"]	["monthly", 24.194444444444443]
["Melbourne", "2000"]	["monthly", 21.38888888888889]
["Melbourne", "1996"]	["monthly", 20.63888888888889]
"Brisbane"	["overall", 24.00966183574879]
"Melbourne"	["overall", 21.63888888888889]
from mrjob.job import MRJob
from mrjob.step import MRStep

class proj1(MRJob):   
    # in-mapper combiner
    def mapper_init(self):
        self.city_year_temps = {}
        self.city_temps = {}
    
    def mapper(self, _, line):
        data = line.strip().split('\t')
        if len(data) == 7:
            city = data[2]
            year = data[5]
            temp_fahrenheit = float(data[6])
            # Convert temperature to Celsius
            temp_celsius = (temp_fahrenheit - 32) * 5 / 9
            
            # Aggregate temperatures by city and year
            if (city, year) not in self.city_year_temps:
                self.city_year_temps[(city, year)] = []
            self.city_year_temps[(city, year)].append(temp_celsius)
            
            # Aggregate temperatures by city
            if city not in self.city_temps:
                self.city_temps[city] = []
            self.city_temps[city].append(temp_celsius)
    
    def mapper_final(self):
        # Emit city-year average temperatures
        for (city, year), temps in self.city_year_temps.items():
            avg_temp = sum(temps) / len(temps)
            
            yield (city, year), ('monthly', avg_temp)
        
        # Emit city overall average temperatures
        for city, temps in self.city_temps.items():
            avg_temp = sum(temps) / len(temps)
            yield city, ('overall', avg_temp)
    
    
    def reducer_init(self):
        self.city_overall_avg = {}
        self.city_year_avg = {}
        self.result = {}
    
    def reducer(self, key, values):
        if isinstance(key, tuple):

            city, year = key
            for value in values:
                if value[0] == 'monthly':
                    self.city_year_avg[city] = (year, value[1])
        else:
            city = key
            for value in values:
                if value[0] == 'overall':
                    self.city_overall_avg[city] = value[1]
                    
    
    def reducer_final(self):
        # Emit city overall average temperatures
        
        for city, avg_temp in self.city_year_avg.items():
            yield city, avg_temp
            '''for year, monthly_avg in self.city_year_avg[city]:
                difference = monthly_avg - avg_temp
                yield city, (year, difference)'''
            


if __name__ == '__main__':
    proj1.run()

